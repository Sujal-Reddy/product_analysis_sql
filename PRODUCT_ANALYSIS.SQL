create database abc_orders;

use abc_orders;

select * from orders
limit 10;

describe products;
describe orders;
describe accounts;

set sql_safe_updates=0;

-- above is to be used if u update table without where , set it to 0

update orders
set order_date=str_to_date(order_date,'%m/%d/%Y'),
ship_date=str_to_date(ship_date,'%m/%d/%Y');

-- in sql for ate formatting always use capital y for year
-- str_to_date is used to change format from string to date 

alter table orders
modify order_date date;

alter table orders
modify ship_date date;

-- check for null values

select count(*)
from orders
where order_no IS NULL;

-- checking for duplicates
select order_no, count(order_no)
from orders
group by order_no
having count(order_no)>1;
-- further check if the duplicate are actual one i.e they are really for same values
select * from orders
where order_no='5768-2' or order_no='6159-2';
-- above we have performed data cleaning now we do perform dat analysis
set sql_safe_updates = 1;

-- 1.what is the total revenue generated by each producct category

select product_category ,
round(sum(total),2) as revenue
from orders
join products
on products.product_id=orders.product_id
group by product_category;
-- as product id common in b/w orders and products we join them and group the totals via category so we get category wise totals

-- 2. how many unique products have been ordered
select distinct(count(product_name)) as unique_products
from products;

-- 3. total revenue generated each year

select extract(year from order_date) as Year,
format(sum(total),2) as revenue
from orders
group by Year;

-- 4. date of latest and earliest order

select min(order_date) as 'earliest date',
max(order_date) as 'latest date'
from orders;

-- 5. what category haslowest avg price
select product_category,
round(avg(retail_price),2) as 'average_price'
from orders
join products
using(product_id)
group by product_category
order by average_price asc
limit 1;
-- top 10 highset products
select product_name,
round(sum(total),2) as revenue
from orders
join products
using(product_id)
group by product_name
order by revenue desc
limit 10;

-- revenue and profit by each account manager
select account_manager,
round(sum(total),2) as revenue,
round(sum(total)-sum(cost_price),2) as profit
from orders
join accounts
using(account_id)
group by account_manager
order by revenue;

-- name,city,account manager with high selling product in 2017

select product_name,
city,
account_manager,
round(sum(total),2) as revenue
from orders
join products
using(product_id)
join accounts
using(account_id)
where extract(year from order_date)=2017
group by product_name,city,account_manager
order by revenue desc
limit 1;
-- below is in overall highest
select product_name,
city,
account_manager,
round(sum(total),2) as revenue
from orders
join products
using(product_id)
join accounts
using(account_id)
group by product_name,city,account_manager
order by revenue desc
limit 1;

-- avg senpt by cust on each customer type

select customer_type,
round(avg(total),2) as average
from orders
group by customer_type;

-- 5th highest selling product

select product_name,
round(sum(total),2) as revenue
from orders
join products
using(product_id)
group by product_name
order by revenue desc
limit 1 offset 4 ;


